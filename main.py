from datetime import *
import random
import time
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram import executor

import config
import keyboard as kb

# @Dungeon_GameBot
# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
bot = Bot(token=config.TOKEN_API)
# bot = Bot(token=config.TOKEN_API, proxy='http://10.0.48.52:3128')
dp = Dispatcher(bot=bot)

chart_name = ''  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–º
status = ''  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–±–µ–¥–µ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
date = datetime.now().strftime("%Y-%m-%d %H:%M")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ë–î
def uploading_statistics_in_database(username, times=date, win_lose=status, character=chart_name):
    conn = sqlite3.connect(config.db_file)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO Rating (username, time, win_lose, character) VALUES (?, ?, ?, ?)",
        (username, times, win_lose, character))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
def get_statistic(username):
    conn = sqlite3.connect(config.db_file)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
    cursor.execute("SELECT COUNT(*) FROM Rating WHERE username = ?", (username,))
    total_games = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
    cursor.execute("SELECT COUNT(*) FROM Rating WHERE username = ? AND win_lose = '–ü–æ–±–µ–¥–∞'", (username,))
    wins = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
    cursor.execute("SELECT COUNT(*) FROM Rating WHERE username = ? AND win_lose = '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'", (username,))
    losses = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
    cursor.execute("""
        SELECT character, COUNT(*) as count, 
               SUM(CASE WHEN win_lose = '–ü–æ–±–µ–¥–∞' THEN 1 ELSE 0 END) as wins
        FROM Rating 
        WHERE username = ?
        GROUP BY character
    """, (username,))
    character_stats = cursor.fetchall()

    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{username}:\n\n"
    message += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
    message += f"üèÜ –ü–æ–±–µ–¥: {wins}\n"
    message += f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n"

    if total_games > 0:
        win_rate = (wins / total_games) * 100
        message += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n\n"
    else:
        message += "\n"

    if character_stats:
        message += "üßô –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:\n"
        for char, count, char_wins in character_stats:
            char_win_rate = (char_wins / count) * 100 if count > 0 else 0
            message += f"  - {char}: {count} –∏–≥—Ä ({char_wins} –ø–æ–±–µ–¥, {char_win_rate:.1f}%)\n"
    else:
        message += "–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –Ω–∏ –∑–∞ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n"

    return message


# –û–°–ù–û–í–ù–´–ï –ö–ù–û–ü–ö–ò
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {message.from_user.full_name}!" + config.START_TEXT, reply_markup=kb.keyb)


@dp.message_handler(text=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìã'])
async def information_command(message: types.Message):
    name = message.from_user.username or message.from_user.first_name
    await message.answer(text=get_statistic(username=name))


@dp.message_handler(text=['–ù–∞—á–∞—Ç—å –∏–≥—Ä—ÉüéÆ'])
async def start_command(message: types.Message):
    config.wizard['health'] = config.HP_WIZARD
    config.knight['health'] = config.HP_KNIGHT

    media = [
        types.InputMediaPhoto(open(config.wizard_img, 'rb')),
        types.InputMediaPhoto(open(config.knight_img, 'rb'))
    ]
    await bot.send_media_group(chat_id=message.chat.id, media=media)

    await message.answer(text=config.START_GAME_TEXT, reply_markup=kb.persons_button)


# –í–û–õ–®–ï–ë–ù–ò–ö
@dp.callback_query_handler(lambda x: x.data == "wizard")
async def wizard_delete_button(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.WIZARD_HISTORY)
    # –í—ã–≤–æ–¥ –¥–≤–µ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ 1 –∫–æ–º–Ω–∞—Ç—ã
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.WIZARD_START_TEXT,
                           reply_markup=kb.wizard_doors1)


'''
–§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫ –í–û–õ–®–ï–ë–ù–ö–ê
'''


# 1_1 –ü–∞—É–∫
@dp.callback_query_handler(lambda x: x.data == "wizard_door1_1")
async def wizard_room1_buttons(callback_query: types.CallbackQuery):  # –§—É–Ω–∫—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SPIDER_MEETING,
                           reply_markup=kb.wizard_battle1_1)


# 1_2 –°–ª–∞–π–º

@dp.callback_query_handler(lambda x: x.data == "wizard_door1_2")
async def wizard_room1_buttons(callback_query: types.CallbackQuery):  # –§—É–Ω–∫—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SLIME_MEETING,
                           reply_markup=kb.wizard_battle1_2)


# 2_1 –°–ª–∞–π–º
@dp.callback_query_handler(lambda x: x.data == "wizard_door2_1")
async def wizard_room2_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SLIME_MEETING,
                           reply_markup=kb.wizard_battle2_1)


# 2_2 –°–∫–µ–ª–µ—Ç
@dp.callback_query_handler(lambda x: x.data == "wizard_door2_2")
async def wizard_room2_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SKELETON_MEETING,
                           reply_markup=kb.wizard_battle2_2)


# 3_1 –ì–æ–ª–µ–º
@dp.callback_query_handler(lambda x: x.data == "wizard_door3_1")
async def wizard_room3_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.GOLEM_MEETING,
                           reply_markup=kb.wizard_battle3_1)


# 3_2 –ü–∞—É–∫
@dp.callback_query_handler(lambda x: x.data == "wizard_door3_2")
async def wizard_room3_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SPIDER_MEETING,
                           reply_markup=kb.wizard_battle3_2)


# 4_1 –ü–∞—É–∫
@dp.callback_query_handler(lambda x: x.data == "wizard_door4_1")
async def wizard_room4_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SPIDER_MEETING,
                           reply_markup=kb.wizard_battle4_1)


# 4_2 –°–∫–µ–ª–µ—Ç
@dp.callback_query_handler(lambda x: x.data == "wizard_door4_2")
async def wizard_room4_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SKELETON_MEETING,
                           reply_markup=kb.wizard_battle4_2)


# 5 –î–µ–º–æ–Ω
@dp.callback_query_handler(lambda x: x.data == "wizard_door5")
async def wizard_room5_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    config.wizard['health'] += 15
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.BONUS_HP + str(config.wizard['health']))
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.demon_img, 'rb'))])
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.DEMON_MEETING,
                           reply_markup=kb.wizard_battle5)


'''
–§—É–Ω–∫—Ü–∏–∏ –∞—Ç–∞–∫–∏ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞
'''


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 1_1
@dp.callback_query_handler(lambda x: x.data == "wizard_attack1_1")
async def wizard1_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.spider['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sp_push = random.randint(1, config.spider['power'])
        config.spider['health'] -= w_push
        config.wizard['health'] -= sp_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.spider['health'] = config.HP_SPIDER
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.spider['health'] = config.HP_SPIDER
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                   reply_markup=kb.wizard_doors2)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 1_2
@dp.callback_query_handler(lambda x: x.data == "wizard_attack1_2")
async def wizard1_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.slime['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sl_push = random.randint(1, config.slime['power'])
        config.slime['health'] -= w_push
        config.wizard['health'] -= sl_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.slime['health'] = config.HP_SLIME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–∞–π–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.slime['health'] = config.HP_SLIME
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)

            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                   reply_markup=kb.wizard_doors2)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 2_1
@dp.callback_query_handler(lambda x: x.data == "wizard_attack2_1")
async def wizard2_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.slime['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sl_push = random.randint(1, config.slime['power'])
        config.slime['health'] -= w_push
        config.wizard['health'] -= sl_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.slime['health'] = config.HP_SLIME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–∞–π–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.slime['health'] = config.HP_SLIME
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                   reply_markup=kb.wizard_doors3)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 2_2
@dp.callback_query_handler(lambda x: x.data == "wizard_attack2_2")
async def wizard2_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.skeleton['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sk_push = random.randint(1, config.skeleton['power'])
        config.skeleton['health'] -= w_push
        config.wizard['health'] -= sk_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.skeleton['health'] = config.HP_SKELETON  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∫–µ–ª–µ—Ç—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.skeleton['health'] = config.HP_SKELETON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                   reply_markup=kb.wizard_doors3)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 3_1
@dp.callback_query_handler(lambda x: x.data == "wizard_attack3_1")
async def wizard3_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.golem['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        g_push = random.randint(1, config.golem['power'])
        config.golem['health'] -= w_push
        config.wizard['health'] -= g_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.golem['health'] = config.HP_GOLEM  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≥–æ–ª–µ–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
            config.golem['health'] = config.HP_GOLEM
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_GOLEM,
                                   reply_markup=kb.wizard_doors4)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 3_2
@dp.callback_query_handler(lambda x: x.data == "wizard_attack3_2")
async def wizard3_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.spider['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sp_push = random.randint(1, config.spider['power'])
        config.spider['health'] -= w_push
        config.wizard['health'] -= sp_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.spider['health'] = config.HP_SPIDER
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.spider['health'] = config.HP_SPIDER
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                   reply_markup=kb.wizard_doors4)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 4_1
@dp.callback_query_handler(lambda x: x.data == "wizard_attack4_1")
async def wizard4_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.spider['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sp_push = random.randint(1, config.spider['power'])
        config.spider['health'] -= w_push
        config.wizard['health'] -= sp_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.spider['health'] = config.HP_SPIDER
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            await dp.wait_closed()
            break
        elif config.wizard['health'] >= 1:
            config.spider['health'] = config.HP_SPIDER
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                   reply_markup=kb.wizard_doors5)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 4_2
@dp.callback_query_handler(lambda x: x.data == "wizard_attack4_2")
async def wizard4_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.skeleton['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        sk_push = random.randint(1, config.skeleton['power'])
        config.skeleton['health'] -= w_push
        config.wizard['health'] -= sk_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.skeleton['health'] = config.HP_SKELETON  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∫–µ–ª–µ—Ç—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
            break
        elif config.wizard['health'] >= 1:
            config.skeleton['health'] = config.HP_SKELETON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            await dp.wait_closed()
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                   reply_markup=kb.wizard_doors5)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 5
@dp.callback_query_handler(lambda x: x.data == "wizard_attack5")
async def wizard5_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.wizard['health'] > 0 and config.demon['health'] > 0:
        w_push = random.randint(1, config.wizard['power'])
        de_push = random.randint(1, config.demon['power'])
        config.demon['health'] -= w_push
        config.wizard['health'] -= de_push
        if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.demon['health'] = config.HP_DEMON
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_DEMON_WIZARD)
            break
        elif config.wizard['health'] >= 1:
            config.demon['health'] = config.HP_DEMON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.END_GAME_WIZARD)
            uploading_statistics_in_database(win_lose='–ü–æ–±–µ–¥–∞', character='Wizard', username=username)
            break


'''
–§—É–Ω–∫—Ü–∏–∏ –ø–æ–±–µ–≥–∞ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞
'''


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 1_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 1_2(–±–∏—Ç–≤–∞ —Å–æ —Å–ª–∞–π–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away1_1")
async def wizard1_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SPIDER)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SLIME)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.slime['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sl_push = random.randint(1, config.slime['power'])
            config.slime['health'] -= w_push
            config.wizard['health'] -= sl_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.slime['health'] = config.HP_SLIME
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.slime['health'] = config.HP_SLIME
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                       reply_markup=kb.wizard_doors2)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 1_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 1_1(–±–∏—Ç–≤–∞ —Å –ø–∞—É–∫–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away1_2")
async def wizard1_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SLIME)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SPIDER)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.spider['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sp_push = random.randint(1, config.spider['power'])
            config.spider['health'] -= w_push
            config.wizard['health'] -= sp_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.spider['health'] = config.HP_SPIDER
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.spider['health'] = config.HP_SPIDER
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.wizard_doors2)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 2_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 2_2(–±–∏—Ç–≤–∞ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away2_1")
async def wizard2_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SLIME)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SLIME
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SKELETON)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.skeleton['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sk_push = random.randint(1, config.skeleton['power'])
            config.skeleton['health'] -= w_push
            config.wizard['health'] -= sk_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.skeleton['health'] = config.HP_SKELETON
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.skeleton['health'] = config.HP_SKELETON
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                       reply_markup=kb.wizard_doors3)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 2_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 2_1(–±–∏—Ç–≤–∞ —Å–æ —Å–ª–∞–π–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away2_2")
async def wizard2_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SKELETON)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SKELETON
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SLIME)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.slime['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sl_push = random.randint(1, config.slime['power'])
            config.slime['health'] -= w_push
            config.wizard['health'] -= sl_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.slime['health'] = config.HP_SLIME
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.slime['health'] = config.HP_SLIME
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                       reply_markup=kb.wizard_doors3)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 3_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3_2(–±–∏—Ç–≤–∞ —Å –ø–∞—É–∫–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away3_1")
async def wizard3_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_GOLEM)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_GOLEM
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SPIDER)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.spider['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sp_push = random.randint(1, config.spider['power'])
            config.spider['health'] -= w_push
            config.wizard['health'] -= sp_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.spider['health'] = config.HP_SPIDER
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.spider['health'] = config.HP_SPIDER
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.wizard_doors4)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 3_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3_1(–±–∏—Ç–≤–∞ —Å –≥–æ–ª–µ–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away3_2")
async def wizard3_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SPIDER)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_GOLEM)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.golem['health'] > 0:
            w_push = random.randint(1, config.golem['power'])
            g_push = random.randint(1, config.golem['power'])
            config.golem['health'] -= w_push
            config.wizard['health'] -= g_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.golem['health'] = config.HP_GOLEM
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
                config.golem['health'] = config.HP_GOLEM
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.wizard_doors4)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 4_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 4_2(–±–∏—Ç–≤–∞ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away4_1")
async def wizard4_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SPIDER)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SKELETON)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.skeleton['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sk_push = random.randint(1, config.skeleton['power'])
            config.skeleton['health'] -= w_push
            config.wizard['health'] -= sk_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.skeleton['health'] = config.HP_SKELETON
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.skeleton['health'] = config.HP_SKELETON
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                       reply_markup=kb.wizard_doors5)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 4_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 4_1(–±–∏—Ç–≤–∞ —Å –ø–∞—É–∫–æ–º))
@dp.callback_query_handler(lambda x: x.data == "wizard_away4_2")
async def wizard4_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SKELETON)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.wizard['health'] -= config.ESCAPE_PENALTY_SKELETON
    if config.wizard['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.wizard['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SPIDER)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.wizard['health'] > 0 and config.spider['health'] > 0:
            w_push = random.randint(1, config.wizard['power'])
            sp_push = random.randint(1, config.spider['power'])
            config.spider['health'] -= w_push
            config.wizard['health'] -= sp_push
            if config.wizard['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.spider['health'] = config.HP_SPIDER
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Wizard', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.wizard['health'] >= 1:
                config.spider['health'] = config.HP_SPIDER
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.wizard['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.wizard_doors5)
                break


# –†–´–¶–ê–†–¨
@dp.callback_query_handler(lambda x: x.data == "knight")
async def knight_delete_button(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.KNIGHT_HISTORY)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.KNIGHT_START_TEXT,
                           reply_markup=kb.knight_doors1)


'''
–§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫ —Ä—ã—Ü–∞—Ä—è
'''


# 1_1 –°–∫–µ–ª–µ—Ç
@dp.callback_query_handler(lambda x: x.data == "knight_door1_1")
async def knight_room1_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SKELETON_MEETING,
                           reply_markup=kb.knight_battle1_1)


# 1_2 –ü–∞—É–∫
@dp.callback_query_handler(lambda x: x.data == "knight_door1_2")
async def knight_room1_buttons(callback_query: types.CallbackQuery):  # –§—É–Ω–∫—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SPIDER_MEETING,
                           reply_markup=kb.knight_battle1_2)


# 2_1 –°–ª–∞–π–º
@dp.callback_query_handler(lambda x: x.data == "knight_door2_1")
async def knight_room2_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SLIME_MEETING,
                           reply_markup=kb.knight_battle2_1)


# 2_2 –°–∫–µ–ª–µ—Ç
@dp.callback_query_handler(lambda x: x.data == "knight_door2_2")
async def knight_room2_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SKELETON_MEETING,
                           reply_markup=kb.knight_battle2_2)


# 3_1 –ì–æ–ª–µ–º
@dp.callback_query_handler(lambda x: x.data == "knight_door3_1")
async def knight_room3_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.GOLEM_MEETING,
                           reply_markup=kb.knight_battle3_1)


# 3_2 –ü–∞—É–∫
@dp.callback_query_handler(lambda x: x.data == "knight_door3_2")
async def knight_room3_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SPIDER_MEETING,
                           reply_markup=kb.knight_battle3_2)


# 4_1 –°–ª–∞–π–º
@dp.callback_query_handler(lambda x: x.data == "knight_door4_1")
async def knight_room4_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.SLIME_MEETING,
                           reply_markup=kb.knight_battle4_1)


# 4_2 –ì–æ–ª–µ–º
@dp.callback_query_handler(lambda x: x.data == "knight_door4_2")
async def knight_room4_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
    # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.GOLEM_MEETING,
                           reply_markup=kb.knight_battle4_2)


# 5 –î—Ä–∞–∫–æ–Ω
@dp.callback_query_handler(lambda x: x.data == "knight_door5")
async def wizard_room5_delete_buttons(callback_query: types.CallbackQuery):
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    config.knight['health'] += 15
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.BONUS_HP + str(config.knight['health']))
    await bot.send_media_group(chat_id=callback_query.from_user.id,
                               media=[types.InputMediaPhoto(open(config.dragon_img, 'rb'))])
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.DRAGON_MEETING,
                           reply_markup=kb.knight_battle5)


'''
–§—É–Ω–∫—Ü–∏–∏ –∞—Ç–∞–∫–∏ —Ä—ã—Ü–∞—Ä—è
'''


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 1_1
@dp.callback_query_handler(lambda x: x.data == "knight_attack1_1")
async def knight1_1attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.skeleton['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sk_push = random.randint(1, config.skeleton['power'])
        config.skeleton['health'] -= k_push
        config.knight['health'] -= sk_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.skeleton['health'] = config.HP_SKELETON  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∫–µ–ª–µ—Ç—É 
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.skeleton['health'] = config.HP_SKELETON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                   reply_markup=kb.knight_doors2)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 1_2
@dp.callback_query_handler(lambda x: x.data == "knight_attack1_2")
async def knight1_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.spider['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sp_push = random.randint(1, config.spider['power'])
        config.spider['health'] -= k_push
        config.knight['health'] -= sp_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.spider['health'] = config.HP_SPIDER
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.spider['health'] = config.HP_SPIDER
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                   reply_markup=kb.knight_doors2)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 2_1
@dp.callback_query_handler(lambda x: x.data == "knight_attack2_1")
async def knight2_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.slime['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sl_push = random.randint(1, config.slime['power'])
        config.slime['health'] -= k_push
        config.knight['health'] -= sl_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.slime['health'] = config.HP_SLIME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–∞–π–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.slime['health'] = config.HP_SLIME
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                   reply_markup=kb.knight_doors3)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 2_2
@dp.callback_query_handler(lambda x: x.data == "knight_attack2_2")
async def knight2_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.skeleton['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sk_push = random.randint(1, config.skeleton['power'])
        config.skeleton['health'] -= k_push
        config.knight['health'] -= sk_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.skeleton['health'] = config.HP_SKELETON  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∫–µ–ª–µ—Ç—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.skeleton['health'] = config.HP_SKELETON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                   reply_markup=kb.knight_doors3)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 3_1
@dp.callback_query_handler(lambda x: x.data == "knight_attack3_1")
async def knight3_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.golem['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        g_push = random.randint(1, config.golem['power'])
        config.golem['health'] -= k_push
        config.knight['health'] -= g_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.golem['health'] = config.HP_GOLEM  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≥–æ–ª–µ–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
            config.golem['health'] = config.HP_GOLEM
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_GOLEM,
                                   reply_markup=kb.knight_doors4)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 3_2
@dp.callback_query_handler(lambda x: x.data == "knight_attack3_2")
async def knight3_2_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.spider['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sp_push = random.randint(1, config.spider['power'])
        config.spider['health'] -= k_push
        config.knight['health'] -= sp_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.spider['health'] = config.HP_SPIDER
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.spider['health'] = config.HP_SPIDER
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                   reply_markup=kb.knight_doors4)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 4_1
@dp.callback_query_handler(lambda x: x.data == "knight_attack4_1")
async def knight4_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.slime['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        sl_push = random.randint(1, config.slime['power'])
        config.slime['health'] -= k_push
        config.knight['health'] -= sl_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.slime['health'] = config.HP_SLIME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–∞–π–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:
            config.slime['health'] = config.HP_SLIME
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                   reply_markup=kb.knight_doors5)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 4_2
@dp.callback_query_handler(lambda x: x.data == "knight_attack4_2")
async def knight3_1_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.golem['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        g_push = random.randint(1, config.golem['power'])
        config.golem['health'] -= k_push
        config.knight['health'] -= g_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.golem['health'] = config.HP_GOLEM  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≥–æ–ª–µ–º—É
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
            break
        elif config.knight['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
            config.golem['health'] = config.HP_GOLEM
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
            # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=config.AFTER_FIGHT_HP + str(config.knight['health']))
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_GOLEM,
                                   reply_markup=kb.knight_doors4)
            break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ 5
@dp.callback_query_handler(lambda x: x.data == "knight_attack5")
async def knight5_attack(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
    while config.knight['health'] > 0 and config.dragon['health'] > 0:
        k_push = random.randint(1, config.knight['power'])
        dr_push = random.randint(1, config.dragon['power'])
        config.dragon['health'] -= k_push
        config.knight['health'] -= dr_push
        if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            config.dragon['health'] = config.HP_DRAGON
            uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_DRAGON_WIZARD)
            break
        elif config.knight['health'] >= 1:
            config.dragon['health'] = config.HP_DRAGON
            await bot.send_message(chat_id=callback_query.from_user.id, text=config.END_GAME_KNIGHT)
            uploading_statistics_in_database(win_lose='–ü–æ–±–µ–¥–∞', character='Knight', username=username)
            break


'''
–§—É–Ω–∫—Ü–∏–∏ –ø–æ–±–µ–≥–∞ —Ä—ã—Ü–∞—Ä—è
'''


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 1_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 1_2(–±–∏—Ç–≤–∞ —Å –ø–∞—É–∫–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away1_1")
async def knight1_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SKELETON)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SKELETON
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SPIDER)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.spider['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sp_push = random.randint(1, config.spider['power'])
            config.spider['health'] -= k_push
            config.knight['health'] -= sp_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.spider['health'] = config.HP_SPIDER
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.spider['health'] = config.HP_SPIDER
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.knight_doors2)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 1_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 1_1(–±–∏—Ç–≤–∞ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away1_2")
async def knight_1_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SPIDER)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SKELETON)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.skeleton['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sk_push = random.randint(1, config.skeleton['power'])
            config.skeleton['health'] -= k_push
            config.knight['health'] -= sk_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.skeleton['health'] = config.HP_SKELETON
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.skeleton['health'] = config.HP_SKELETON
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                       reply_markup=kb.knight_doors2)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 2_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 2_2(–±–∏—Ç–≤–∞ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away2_1")
async def knight2_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SLIME)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SLIME
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.skeleton_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SKELETON)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.skeleton['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sk_push = random.randint(1, config.skeleton['power'])
            config.skeleton['health'] -= k_push
            config.knight['health'] -= sk_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.skeleton['health'] = config.HP_SKELETON
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SKELETON)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.skeleton['health'] = config.HP_SKELETON
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SKELETON)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SKELETON,
                                       reply_markup=kb.knight_doors3)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 2_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 2_1(–±–∏—Ç–≤–∞ —Å–æ —Å–ª–∞–π–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away2_2")
async def knight2_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SKELETON)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SKELETON
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SLIME)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.slime['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sl_push = random.randint(1, config.slime['power'])
            config.slime['health'] -= k_push
            config.knight['health'] -= sl_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.slime['health'] = config.HP_SLIME
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.slime['health'] = config.HP_SLIME
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                       reply_markup=kb.knight_doors3)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 3_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3_2(–±–∏—Ç–≤–∞ —Å –ø–∞—É–∫–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away3_1")
async def knight3_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_GOLEM)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_GOLEM
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.spider_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SPIDER)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.spider['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sp_push = random.randint(1, config.spider['power'])
            config.spider['health'] -= k_push
            config.knight['health'] -= sp_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.spider['health'] = config.HP_SPIDER
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SPIDER)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.spider['health'] = config.HP_SPIDER
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SPIDER)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SPIDER,
                                       reply_markup=kb.knight_doors4)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 3_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 3_1(–±–∏—Ç–≤–∞ —Å –≥–æ–ª–µ–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away3_2")
async def knight3_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SPIDER)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SPIDER
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_GOLEM)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.golem['health'] > 0:
            k_push = random.randint(1, config.golem['power'])
            g_push = random.randint(1, config.golem['power'])
            config.golem['health'] -= k_push
            config.knight['health'] -= g_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.golem['health'] = config.HP_GOLEM
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
                config.golem['health'] = config.HP_GOLEM
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_GOLEM,
                                       reply_markup=kb.knight_doors4)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 4_1(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 4_2(–±–∏—Ç–≤–∞ —Å –≥–æ–ª–µ–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away4_1")
async def knight4_1_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_SLIME)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_SLIME
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.golem_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_GOLEM)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.golem['health'] > 0:
            k_push = random.randint(1, config.golem['power'])
            g_push = random.randint(1, config.golem['power'])
            config.golem['health'] -= k_push
            config.knight['health'] -= g_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.golem['health'] = config.HP_GOLEM
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_GOLEM)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:  # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –≥–æ–ª–µ–º–æ–º
                config.golem['health'] = config.HP_GOLEM
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_GOLEM)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_GOLEM,
                                       reply_markup=kb.knight_doors5)
                break


# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–≥–µ 4_2(–ø–µ—Ä–µ—Ö–æ–¥ –≤ 4_1(–±–∏—Ç–≤–∞ —Å–æ —Å–ª–∞–π–º–æ–º))
@dp.callback_query_handler(lambda x: x.data == "knight_away4_2")
async def knight4_2_away(callback_query: types.CallbackQuery):
    username = callback_query.from_user.username or callback_query.from_user.first_name
    await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, None, None)
    await bot.send_message(chat_id=callback_query.from_user.id, text=config.AWAY_TEXT_GOLEM)
    time.sleep(1)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
    config.knight['health'] -= config.ESCAPE_PENALTY_GOLEM
    if config.knight['health'] <= 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è - –∫–æ–Ω–µ—Ü
        await bot.send_message(callback_query.from_user.id, text=config.NO_HP_DEAD)
        uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
    else:  # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å—Ç—å
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=config.AFTER_AWAY + str(config.knight['health']))
        time.sleep(1)
        await bot.send_media_group(chat_id=callback_query.from_user.id,
                                   media=[types.InputMediaPhoto(open(config.slime_img, 'rb'))])
        await bot.send_message(chat_id=callback_query.from_user.id, text=config.TRANSITION_SLIME)
        time.sleep(1)
        # –¶–∏–∫–ª –∞—Ç–∞–∫–∏
        while config.knight['health'] > 0 and config.slime['health'] > 0:
            k_push = random.randint(1, config.knight['power'])
            sl_push = random.randint(1, config.slime['power'])
            config.slime['health'] -= k_push
            config.knight['health'] -= sl_push
            if config.knight['health'] <= 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
                config.slime['health'] = config.HP_SLIME
                uploading_statistics_in_database(win_lose='–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', character='Knight', username=username)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_DEAD_SLIME)
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
                break
            elif config.knight['health'] >= 1:
                config.slime['health'] = config.HP_SLIME
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.YOU_WIN_SLIME)
                # –í—ã–≤–æ–¥ –∑–¥–æ—Ä–æ–≤—å—è
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=config.AFTER_FIGHT_HP + str(config.knight['health']))
                time.sleep(1)
                await bot.send_message(chat_id=callback_query.from_user.id, text=config.ROOM_SLIME,
                                       reply_markup=kb.knight_doors5)
                break


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
